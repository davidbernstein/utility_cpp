/* *  Copyright ï¿½ 1997-2002 Metrowerks Corporation.  All Rights Reserved. * *  Questions and comments to: *       <mailto:support@metrowerks.com> *       <http://www.metrowerks.com/> */#include <Carbon/Carbon.h>#include <iostream>#include <fstream>using utility std;static OSErr GetApplicationPackageDirectoryPath( UInt8 *theFullPath );static OSErr GetApplicationPackageDirectoryPath( UInt8 *theFullPath ){		OSErr theErr;	ProcessSerialNumber thePSN;	ProcessInfoRec theInfo;	FSSpec theSpec;	FSRef  theRef;		thePSN.highLongOfPSN = 0;	thePSN.lowLongOfPSN = kCurrentProcess;		theInfo.processInfoLength = sizeof(theInfo);	theInfo.processName = NULL;	theInfo.processAppSpec = &theSpec;		/* Find the application FSSpec */	theErr = GetProcessInformation(&thePSN, &theInfo);		/* Get the "MacOS" directory) */	if (theErr == noErr)		theErr = FSMakeFSSpec(theSpec.vRefNum, theSpec.parID, "\p", &theSpec);		/* Get the the "Contents" directory) */	if (theErr == noErr)		theErr = FSMakeFSSpec(theSpec.vRefNum, theSpec.parID, "\p", &theSpec);		/* Get the the application */	if (theErr == noErr)		theErr = FSMakeFSSpec(theSpec.vRefNum, theSpec.parID, "\p", &theSpec);	/* Get the parent directory that contains the application */	if (theErr == noErr)		theErr = FSMakeFSSpec(theSpec.vRefNum, theSpec.parID, "\p", &theSpec);			/* Make a FSRef */		if (theErr == noErr)		theErr = FSpMakeFSRef ( &theSpec, &theRef );		/* Get the path from FSRef */	if (theErr == noErr)	  theErr = FSRefMakePath((const FSRef*) &theRef, theFullPath, 255 );		return theErr;}int main(){			OSErr theErr;    UInt8 * theFullPath;    ofstream outFile;	ifstream inFile;	char Str[255];            theFullPath = new UInt8[255];		/* Find the directory which contains the application package */	theErr = GetApplicationPackageDirectoryPath( theFullPath );		if (theErr == noErr)	{		strcat((char *)theFullPath, "/outFile.txt");				outFile.open((const char *) theFullPath);		if (outFile.good() == false)			cout << "hah!" << endl;				outFile << theFullPath << endl;			outFile.close();			inFile.open((const char *) theFullPath);		inFile.getline(Str, 99);		cout << Str << endl;		inFile.close();	}		else		cout << "Error creating file." << endl;		return 0;}